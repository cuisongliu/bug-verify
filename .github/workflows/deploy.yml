name: TestBug#deploy
on:
  workflow_dispatch:
    inputs:
jobs:
  image-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [ user, terminal, metering, infra, cluster, app, imagehub, account ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: cuisongliu/sealos
          ref: 'deploy'

      - name: Auto install sealos
        uses: labring/sealos-action@v0.0.4
        with:
          sealosVersion: 4.1.5-alpha2


      - name: Build ${{ matrix.module }} amd64
        working-directory: controllers/${{ matrix.module }}
        run: |
          GOARCH=amd64 make build
          mv bin/manager bin/controller-${{ matrix.module }}-amd64
          chmod +x bin/controller-${{ matrix.module }}-amd64

      - name: Prepare
        id: prepare
        run: |
          TAG=deploy
          echo tag_name=${TAG} >> $GITHUB_OUTPUT

      - name: build   ${{ matrix.module }} main controller image
        env:
          # fork friendly ^^
          DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/sealos-${{ matrix.module }}-controller
        working-directory: controllers/${{ matrix.module }}/deploy
        run: |
          ls -l
          sealos build --debug  -t ${DOCKER_REPO}:${{ steps.prepare.outputs.tag_name }}-cluster .
          sealos login -u ${{ github.repository_owner }} -p ${{ secrets.G_REGISTRY_TOKEN }} --debug ghcr.io
          sealos push  ${DOCKER_REPO}:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: docker images
        run: |
          sudo sealos images
  verify:
    needs:
      - image-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Auto install sealos
        uses: labring/sealos-action@v0.0.4
        with:
          sealosVersion: 4.1.5-alpha2

      - name: Auto install k8s using sealos
        run: |
          sudo sealos run labring/kubernetes:v1.25.0 labring/helm:v3.8.2 labring/calico:v3.24.1 labring/cert-manager:v1.8.0 --single --debug
          mkdir -p "$HOME/.kube"
          sudo cp -i /etc/kubernetes/admin.conf "$HOME/.kube/config"
          sudo chown "$(whoami)" "$HOME/.kube/config"
          kubectl get nodes --no-headers -oname | while read -r node; do kubectl get "$node" -o template='{{range .spec.taints}}{{.key}}{{"\n"}}{{end}}' | while read -r taint; do
            kubectl taint ${node/\// } "$taint"-
          done; done
          # wait Creating
          kubectl get pods -oname --all-namespaces | sort | tee all.pods
          until ! diff <(kubectl get pods -oname --all-namespaces | sort) all.pods &>/dev/null; do
            sleep 1
            if kubectl get pods -owide --all-namespaces | grep -E "3m.+s" &>/dev/null; then
              kubectl get pods -owide --all-namespaces
              break
            fi
          done
          # wait Running
          until ! kubectl get pods --no-headers --all-namespaces | grep -vE Running &>/dev/null; do
            sleep 5
            kubectl get pods -oname --all-namespaces | grep -vE Running
            echo;echo;echo
            if kubectl get pods -owide --all-namespaces | grep -E "30m.+s" &>/dev/null; then
              break
            fi
          done
          kubectl get pods -owide --all-namespaces
          echo;echo;echo
          kubectl get node -owide
          echo;echo;echo
      - name: Prepare
        id: prepare
        run: |
          TAG=deploy
          echo tag_name=${TAG} >> $GITHUB_OUTPUT
      - name: Auto install user app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-user-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install account app using sealos
        working-directory: sealos#deploy
        run: |
          kubectl apply -f deploy.yaml
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-account-controller:${{ steps.prepare.outputs.tag_name }}-cluster

      - name: Auto install terminal app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-terminal-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install metering app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-metering-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install infra app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-infra-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install cluster app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-cluster-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install app app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-app-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      - name: Auto install imagehub app using sealos
        run: |
          sudo sealos run ghcr.io/${{ github.repository_owner }}/sealos-imagehub-controller:${{ steps.prepare.outputs.tag_name }}-cluster
      

      - name: After k8s operation
        run: |
          # wait Creating
          kubectl get pods -oname --all-namespaces | sort | tee all.pods
          until ! diff <(kubectl get pods -oname --all-namespaces | sort) all.pods &>/dev/null; do
            sleep 1
            if kubectl get pods -owide --all-namespaces | grep -E "3m.+s" &>/dev/null; then
              kubectl get pods -owide --all-namespaces
              break
            fi
          done
          # wait Running
          until ! kubectl get pods --no-headers --all-namespaces | grep -vE Running &>/dev/null; do
            sleep 5
            kubectl get pods -oname --all-namespaces | grep -vE Running
            echo;echo;echo
            if kubectl get pods -owide --all-namespaces | grep -E "30m.+s" &>/dev/null; then
              break
            fi
          done
          kubectl get pods -owide --all-namespaces
          echo;echo;echo
          kubectl get node -owide
          echo;echo;echo
          sudo crictl ps -a
          sudo cat /etc/hosts
          sudo systemctl status kubelet
